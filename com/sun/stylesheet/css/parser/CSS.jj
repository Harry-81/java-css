/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ../../build/parser/com/sun/stylesheet/css/parser/CSS.jj */
/*@egen*//*
 * Copyright 2008 Sun Microsystems, Inc.  All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
 */

options {
  STATIC = false;
  JDK_VERSION = "1.4";                           
}

PARSER_BEGIN(CSSParserImpl)
package com.sun.stylesheet.css.parser;

public class CSSParserImpl/*@bgen(jjtree)*/implements CSSParserImplTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTCSSParserImplState jjtree = new JJTCSSParserImplState();

/*@egen*/
    public SimpleNode popNode() {
        if (jjtree.nodeArity() > 0)  // number of child nodes 
            return (SimpleNode) jjtree.popNode();
        else
            return null;
    }

    void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode) n).firstToken = getToken(1);
    }

    void jjtreeCloseNodeScope(Node n) {
        ((SimpleNode) n).lastToken = getToken(0);
    }

    public static void main(String args[]) {
        System.out.println("Reading from standard input...");
        CSSParserImpl css = new CSSParserImpl(System.in);
        try {
          SimpleNode n = css.Stylesheet();
          n.dump("");
          System.out.println("Thank you.");
        } 
        catch (Exception e) {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          e.printStackTrace();
        }
    }
}

PARSER_END(CSSParserImpl)

TOKEN:
{
  <WHITESPACE: (" " | "\t" | "\n" | "\r")+>
}

SKIP :
{
  <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

<DEFAULT> SKIP :
{
  "/*" : IN_COMMENT
}

<IN_COMMENT> SKIP:
{
   "*/" : DEFAULT
}

<IN_COMMENT> MORE:
{
  < ~[] >
}

TOKEN: /* LITERALS */
{
  <DECIMAL_LITERAL: <INTEGER_LITERAL> ("." <INTEGER_LITERAL>)?>
|
  <#INTEGER_LITERAL: (["0"-"9"])+>
}

TOKEN: /* new */
{
  <NEW: "new">
}

TOKEN: /* IMPORTANT */
{
  <IMPORTANT: "important">
}

TOKEN: /* OVER */
{
  <OVER: "over">
}

TOKEN: /* PROGRAMMATIC_PSEUDOCLASS */
{
  <PROGRAMMATIC_PSEUDOCLASS: ":{" (~["}"])+ "}"> : DEFAULT
}
  
TOKEN: /* COLON */
{
  <COLON: ":"> 
}

TOKEN: /* SEMICOLON */
{
  <SEMICOLON: ";">
}

TOKEN: /* GT */
{
  <GT: ">">
}

TOKEN: /* PLUS */
{
  <PLUS: "+">
}

TOKEN: /* LEFT BRACE */
{
  <LEFT_BRACE: "{">
}

TOKEN: /* RIGHT BRACE */
{
  <RIGHT_BRACE: "}">
}

TOKEN: /* DOT */
{
  <DOT: ".">
}

TOKEN: /* COMMA */
{
  <COMMA: ",">
}

TOKEN: /* PERCENT */
{
  <PERCENT: "%">
}

TOKEN: /* STRINGS */
{
  <STRING: ("\"" ((~["\"", "\\", "\n", "\r"]) | 
            ("\\" (["n","t","b","r","f","\\","'","\""])))* "\"") |
           ("'" ((~["'", "\\", "\n", "\r"]) | 
            ("\\" (["n","t","b","r","f","\\","'","\""])))* "'")  >
}

TOKEN: /* COLORS */
{
  <HEXCOLOR: "#" <HEXDIGIT> <HEXDIGIT> <HEXDIGIT> (<HEXDIGIT> <HEXDIGIT> <HEXDIGIT> (<HEXDIGIT> <HEXDIGIT>)?)?>
|
  <#HEXDIGIT: ["0"-"9", "a"-"f", "A"-"F"]>
}

TOKEN: /* EXCL */
{
  <EXCL: "!">
}


TOKEN: /* LEFT_PAREN */
{
  <LEFT_PAREN: "(">
}

TOKEN: /* RIGHT_PAREN */
{
  <RIGHT_PAREN: ")">
}

TOKEN: /* LINEAR */
{
  <LINEAR: "linear">
}

TOKEN: /* RADIAL */
{
  <RADIAL: "radial">
}

TOKEN: /* FOCUS */
{
  <FOCUS: "focus">
}

TOKEN: /* STOPS */
{
  <STOPS: "stops">
}

TOKEN: /* TO */
{
  <TO: "to">
}

TOKEN: /* REPEAT */
{
  <REPEAT: "repeat">
}

TOKEN: /* REFLECT */
{
  <REFLECT: "reflect">
}

TOKEN: /* PERCENTAGE */
{
  <PERCENTAGE: <DECIMAL_LITERAL> "%">
}

TOKEN: /* LENGTH */
{
  <LENGTH: <DECIMAL_LITERAL> ("pt" | "px" | "mm" | "cm" | "pc" |
 		"in" | "em" | "ex")>
}

TOKEN: /* TIME */
{
  <TIME: <DECIMAL_LITERAL> ("ms" | "s" | "m")>
}

TOKEN: /* DEFAULT */
{
  <DEFAULT_INTERPOLATION: "default">
}

TOKEN: /* EASE-IN */
{
  <EASE_IN: "ease-in">
}

TOKEN: /* EASE-OUT */
{
  <EASE_OUT: "ease-out">
}

TOKEN: /* EASE-IN-OUT */
{
  <EASE_IN_OUT: "ease-in-out">
}

TOKEN: /* IDENTIFIER */
{
  <IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)*>
|
  <#LETTER: ["_", "-", "a"-"z", "A"-"Z"]>
|
  <#DIGIT: ["0"-"9"]>
}

SimpleNode Stylesheet() : {/*@bgen(jjtree) Stylesheet */
  SimpleNode jjtn000 = new SimpleNode(JJTSTYLESHEET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stylesheet */
  try {
/*@egen*/
  (<WHITESPACE>)*
  (Rule() (<WHITESPACE>)*)*
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void Rule() : {/*@bgen(jjtree) Rule */
  SimpleNode jjtn000 = new SimpleNode(JJTRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Rule */
  try {
/*@egen*/
  Selectors() (<WHITESPACE>)*
  <LEFT_BRACE> (<WHITESPACE>)* Declaration() (<WHITESPACE>)*
 	(";" (<WHITESPACE>)* (Declaration() (<WHITESPACE>)* )?)* <RIGHT_BRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void Selectors() : {/*@bgen(jjtree) Selectors */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTORS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Selectors */
  try {
/*@egen*/
  Selector() (<COMMA> (<WHITESPACE>)* Selector())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void SimpleSelector() : {/*@bgen(jjtree) SimpleSelector */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMPLESELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SimpleSelector */
  try {
/*@egen*/
  JavaClass() (Id())? (Class())? (PseudoClass())*
| 
  Id() (Class())? (PseudoClass())*
|
  Class() (PseudoClass())*
|
  (PseudoClass())+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void Selector() : {/*@bgen(jjtree) Selector */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Selector */
  try {
/*@egen*/
  SimpleSelector() 
  (LOOKAHEAD(2) Relationship() SimpleSelector())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Relationship() : {/*@bgen(jjtree) Relationship */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATIONSHIP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Relationship */
  try {
/*@egen*/
  (<GT> (<WHITESPACE>)*) | 
  ((<WHITESPACE>)+ (<GT> (<WHITESPACE>)*)?)/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void JavaClass() : {/*@bgen(jjtree) JavaClass */
  SimpleNode jjtn000 = new SimpleNode(JJTJAVACLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JavaClass */
  try {
/*@egen*/
  <IDENTIFIER> | "*"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void Id() : {/*@bgen(jjtree) Id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Id */
  try {
/*@egen*/
  "#" <IDENTIFIER>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void Class() : {/*@bgen(jjtree) Class */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Class */
  try {
/*@egen*/
  "." <IDENTIFIER>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void PseudoClass() : {/*@bgen(jjtree) PseudoClass */
  SimpleNode jjtn000 = new SimpleNode(JJTPSEUDOCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PseudoClass */
  try {
/*@egen*/
  (<COLON> <IDENTIFIER>) | <PROGRAMMATIC_PSEUDOCLASS>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void Declaration() : {/*@bgen(jjtree) Declaration */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Declaration */
  try {
/*@egen*/
  Property() (<WHITESPACE>)* <COLON> (<WHITESPACE>)* (Gradient() | ArgumentList()) 
		(LOOKAHEAD((<WHITESPACE>)* <EXCL>) (<WHITESPACE>)* (DeclExtras()))?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void Time() : {/*@bgen(jjtree) Time */
  SimpleNode jjtn000 = new SimpleNode(JJTTIME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Time */
        try {
/*@egen*/
	<TIME>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}


void Interpolation() : {/*@bgen(jjtree) Interpolation */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERPOLATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Interpolation */
        try {
/*@egen*/
	<DEFAULT_INTERPOLATION> | <LINEAR> | <EASE_IN> | <EASE_OUT> | <EASE_IN_OUT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}


void DeclExtra() : {/*@bgen(jjtree) DeclExtra */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLEXTRA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeclExtra */
        try {
/*@egen*/
	<IMPORTANT> | <OVER> (<WHITESPACE>)* Time() 
			(LOOKAHEAD((<WHITESPACE>)* Interpolation()) (<WHITESPACE>)* Interpolation())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}


void DeclExtras() : {/*@bgen(jjtree) DeclExtras */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLEXTRAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeclExtras */
    try {
/*@egen*/
    <EXCL> (<WHITESPACE>)* DeclExtra() 
		(LOOKAHEAD((<WHITESPACE>)* <EXCL>) (<WHITESPACE>)* <EXCL> (<WHITESPACE>)* DeclExtra())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}


void Property() : {/*@bgen(jjtree) Property */
  SimpleNode jjtn000 = new SimpleNode(JJTPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Property */
  try {
/*@egen*/
  <IDENTIFIER>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void Expression() : {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
   try {
/*@egen*/
   <DECIMAL_LITERAL> | <STRING> | 
   <NEW> CompoundName() (LOOKAHEAD((<WHITESPACE>)* <LEFT_PAREN>) (<WHITESPACE>)* Params())? | 
   <HEXCOLOR> | <PERCENTAGE> | <LENGTH> |
	CompoundName() 
		(LOOKAHEAD((<WHITESPACE>)* (<LEFT_PAREN> | <LEFT_BRACE>))
		  ((<WHITESPACE>)* (Params() | FXObjectLiteralBody())))?/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
}


void Color() : {/*@bgen(jjtree) Color */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Color */
   try {
/*@egen*/
   <HEXCOLOR> | <IDENTIFIER>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
}


void CycleMethod() : {/*@bgen(jjtree) CycleMethod */
  SimpleNode jjtn000 = new SimpleNode(JJTCYCLEMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CycleMethod */
  try {
/*@egen*/
  <REPEAT> | <REFLECT>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void LinearGradient() : {/*@bgen(jjtree) LinearGradient */
  SimpleNode jjtn000 = new SimpleNode(JJTLINEARGRADIENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LinearGradient */
   try {
/*@egen*/
   <LINEAR> (<WHITESPACE>)* (Point() (<WHITESPACE>)* <TO> (<WHITESPACE>)* Point()
		(<WHITESPACE>)*)? <STOPS> (<WHITESPACE>)* Stop() 
		(LOOKAHEAD((<WHITESPACE>)* <COMMA>)	(<WHITESPACE>)* <COMMA> (<WHITESPACE>)* 
		Stop())* 
		(LOOKAHEAD((<WHITESPACE>)* CycleMethod()) (<WHITESPACE>)* CycleMethod())?/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
}


void Focus() : {/*@bgen(jjtree) Focus */
  SimpleNode jjtn000 = new SimpleNode(JJTFOCUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Focus */
   try {
/*@egen*/
   <FOCUS> Point()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
}


void RadialGradient() : {/*@bgen(jjtree) RadialGradient */
  SimpleNode jjtn000 = new SimpleNode(JJTRADIALGRADIENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RadialGradient */
   try {
/*@egen*/
   <RADIAL> (<WHITESPACE>)* (Point() (<WHITESPACE>)* <COMMA> (<WHITESPACE>)*)? 
		NumberWithOptionalPercent() (<WHITESPACE>)* (Focus() (<WHITESPACE>)*)? 
		<STOPS> (<WHITESPACE>)* Stop() 
		(LOOKAHEAD((<WHITESPACE>)* <COMMA>)	(<WHITESPACE>)* <COMMA> (<WHITESPACE>)* 
		Stop())* 
		(LOOKAHEAD((<WHITESPACE>)* CycleMethod()) (<WHITESPACE>)* CycleMethod())?/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
}


void FXObjectLiteralBody() : {/*@bgen(jjtree) FXObjectLiteralBody */
  SimpleNode jjtn000 = new SimpleNode(JJTFXOBJECTLITERALBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FXObjectLiteralBody */
  try {
/*@egen*/
  <LEFT_BRACE> (<WHITESPACE>)* (Declaration() (<WHITESPACE>)* 
	(<SEMICOLON> (<WHITESPACE>)*)?)* <RIGHT_BRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


SimpleNode FXObjectLiteral() : {/*@bgen(jjtree) FXObjectLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTFXOBJECTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FXObjectLiteral */
  try {
/*@egen*/
  CompoundName() ((<WHITESPACE>)* FXObjectLiteralBody())?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


SimpleNode Gradient() : {/*@bgen(jjtree) Gradient */
  SimpleNode jjtn000 = new SimpleNode(JJTGRADIENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Gradient */
  try {
/*@egen*/
  (LinearGradient() | RadialGradient())/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void NumberWithOptionalPercent() : {/*@bgen(jjtree) NumberWithOptionalPercent */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBERWITHOPTIONALPERCENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NumberWithOptionalPercent */
        try {
/*@egen*/
	<DECIMAL_LITERAL> | <PERCENTAGE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}


void Point() : {/*@bgen(jjtree) Point */
  SimpleNode jjtn000 = new SimpleNode(JJTPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Point */
   try {
/*@egen*/
   <LEFT_PAREN> (<WHITESPACE>)* NumberWithOptionalPercent() (<WHITESPACE>)*
 		<COMMA>	(<WHITESPACE>)* NumberWithOptionalPercent() (<WHITESPACE>)*
 		<RIGHT_PAREN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
}


void Stop() : {/*@bgen(jjtree) Stop */
  SimpleNode jjtn000 = new SimpleNode(JJTSTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stop */
   try {
/*@egen*/
   <LEFT_PAREN> (<WHITESPACE>)* NumberWithOptionalPercent() (<WHITESPACE>)*
 		<COMMA>	(<WHITESPACE>)* Color() (<WHITESPACE>)* <RIGHT_PAREN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
}


void CompoundName() : {/*@bgen(jjtree) CompoundName */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPOUNDNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompoundName */
    try {
/*@egen*/
    <IDENTIFIER> (<DOT> <IDENTIFIER>)*/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}


void Argument() : {/*@bgen(jjtree) Argument */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Argument */
    try {
/*@egen*/
    Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}


void ArgumentList() : {/*@bgen(jjtree) ArgumentList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
    try {
/*@egen*/
    Argument() 
		(LOOKAHEAD((<WHITESPACE>)* <COMMA>) (<WHITESPACE>)* <COMMA> (<WHITESPACE>)* Argument())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}


void Params() : {/*@bgen(jjtree) Params */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Params */
        try {
/*@egen*/
	(<LEFT_PAREN> (<WHITESPACE>)* (ArgumentList() (<WHITESPACE>)*)? <RIGHT_PAREN>)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}


void Identifier() : {/*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  <IDENTIFIER>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}